# -*- coding: utf-8 -*-
"""iris_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14peZNiSKjvQN6nQIDPivYBJDMDlpJrh6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
import warnings
warnings.filterwarnings("ignore")

data=pd.read_csv("Iris.csv")
data

data.shape

data.info()

data.describe()

data=data.drop("Id",axis=1)

data.head()

data['Species'].value_counts()

data.isnull().sum()

data['SepalLengthCm'].hist()

data['PetalLengthCm'].hist()

data['SepalWidthCm'].hist()

data['PetalWidthCm'].hist()

color=['red','blue','green']
Species=[
'Iris-setosa',
'Iris-versicolor',
'Iris-virginica']

for i in range(3):
    x=data[data['Species']==Species[i]]
    plt.scatter(x['SepalLengthCm'],x['SepalWidthCm'],c=color[i],label=Species[i])
plt.xlabel('SepalLengthCm')
plt.ylabel('SepalWidthCm')
plt.legend()

for i in range(3):
    x=data[data['Species']==Species[i]]
    plt.scatter(x['PetalLengthCm'],x['PetalWidthCm'],c=color[i],label=Species)

plt.xlabel('PetalLengthCm')
plt.ylabel('PetalWidthCm')
plt.legend()

from sklearn.model_selection import train_test_split # Fixed the typo in the function name
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

from re import X
x=data.drop('Species',axis=1)
y=data['Species']
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

model=LogisticRegression()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(model.score(X_train,y_train)*100)
print(model.score(X_test,y_test)*100)

model.fit(X_train.values,y_train.values)

print(model.score(X_test,y_test)*100)

model=KNeighborsClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(model.score(X_train,y_train)*100)
print(model.score(X_test,y_test)*100)

model.fit(X_train.values,y_train.values)

print(model.score(X_test,y_test)*100)

model=DecisionTreeClassifier()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(model.score(X_train,y_train)*100)

model.fit(X_train.values,y_train.values)

print(model.score(X_test,y_test)*100)

import pickle
pickle.dump(model,open('model.pkl','wb'))

load_model=pickle.load(open('model.pkl','rb'))

load_model.predict([[5.1,3.5,1.4,0.2]])

